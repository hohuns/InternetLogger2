{"version":3,"sources":["Service/ApiService.js","store/userSlice.js","components/LogInForm/Loginform.js","pages/Login.js","components/Layout/DrawerComponent.js","components/Layout/MainNavigation.js","components/Layout/Layout.js","components/MessageLogForm/AddNoteEn.js","components/MessageLogForm/NoteEn.js","components/MessageLogForm/NoteListEn.js","components/MessageLogForm/MessageLogFormEn.js","pages/MessageLogEn.js","components/MessageLogForm/AddNoteKr.js","components/MessageLogForm/NoteKr.js","components/MessageLogForm/NoteListKr.js","components/MessageLogForm/MessageLogFormKr.js","pages/MessageLogKr.js","components/SingInForm/SignInForm.js","pages/SignIn.js","components/ChangePasswordForm/ChangePasswordForm.js","pages/ChangePassword.js","components/Home/HomeFormEn.js","pages/HomePageEn.js","components/Home/HomeFormKr.js","pages/HomePageKr.js","components/UpdateProfileForm/UpdateProfileForm.js","pages/ChangeUserName.js","components/InitialPage/InitialPage.js","pages/InitialPage.js","App.js","index.js"],"names":["logIn","enteredEmail","enteredPassword","a","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","data","ok","console","log","errorMessage","error","message","Error","json","alert","signIn","userSlice","createSlice","name","initialState","user","idToken","isLoggedIn","reducers","updateUser","state","action","payload","updateIdToken","updateIsLoggedIn","store","configureStore","reducer","usersActions","actions","Login","props","dispatch","useDispatch","idRef","useRef","pwRef","navigate","useNavigate","reduxidToken","useSelector","Typography","variant","color","Divider","sx","backgroundColor","marginTop","Grid","container","spacing","style","item","xs","sm","TextField","required","input","borderRadius","border","margin","label","type","fullWidth","inputRef","onClick","current","value","then","r","registered","displayName","localStorage","setItem","Loginform","DrawerComponent","openDrawer","setOpenDrawer","reduxIsLoggedIn","reduxUser","Drawer","anchor","open","List","ListItem","divider","button","ListItemIcon","ListItemText","Navbar","useState","theme","useTheme","matches","useMediaQuery","breakpoints","down","Box","elevation","Toolbar","display","justifyContent","width","alignItems","padding","component","marginRight","cursor","IconButton","Layout","MainNavigation","children","AddNoteEn","titleRef","textRef","now","Date","reduxUserInfo","onSubmit","event","preventDefault","notes","title","text","date","toLocaleString","logger","AddNote","className","htmlFor","id","ref","placeholder","rows","NoteEn","NoteListEn","note","map","key","MessageLogFormEn","setNote","setError","isLoading","setIsLoading","fetchNoteHandlerEn","useCallback","response","loadedNotes","push","reverse","useEffect","content","length","removeItem","MessageLogEn","AddNoteKr","NoteKr","NoteListKr","MessageLogFormKr","fetchNoteHandlerKr","MessageLogKr","SignInForm","SignIn","ChangePasswordForm","formHandler","ChangePassword","HomeFormEn","height","src","HomePageEn","HomeFormKr","marginLeft","HomePageKr","UpdateProfileForm","userRef","photoUrl","ChangeUserName","InitialPage","App","storedToken","getItem","storedIsLoggedIn","storedUser","path","element","to","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92a56234.chunk.js","sourcesContent":["const logIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage = \"Authentication failed! \\n 로그인에 실패하였습니다.\";\n      if (data?.error?.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst signIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage =\n        \"Sign In failed! Password Should be more than 7 digits. \\n 회원가입에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다.\";\n      if (data?.error?.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nexport { logIn, signIn };\n","import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: \"\",\n  idToken: \"\",\n  isLoggedIn: false,\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    updateUser(state, action) {\n      state.user = action.payload;\n    },\n    updateIdToken(state, action) {\n      state.idToken = action.payload;\n    },\n    updateIsLoggedIn(state, action) {\n      state.isLoggedIn = action.payload;\n    },\n  },\n});\n\n//Create the store\nconst store = configureStore({\n  reducer: userSlice.reducer,\n});\n\nexport const usersActions = userSlice.actions;\nexport default store;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Login = (props) => {\n  const dispatch = useDispatch();\n  const idRef = useRef(\"\");\n  const pwRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxidToken = useSelector((state) => state.idToken);\n\n  const formHandler = () => {\n    const a = logIn(idRef.current.value, pwRef.current.value);\n    a.then((r) => {\n      console.log(r);\n      if (\n        (r?.registered === true && r?.displayName === \"Hans\") ||\n        (r?.registered === true && r?.displayName === \"Sarah\")\n      ) {\n        dispatch(usersActions.updateIdToken(r.idToken));\n        dispatch(usersActions.updateIsLoggedIn(true));\n        dispatch(usersActions.updateUser(r?.displayName));\n        localStorage.setItem(\"token\", r.idToken);\n        localStorage.setItem(\"isLoggedIn\", true);\n        localStorage.setItem(\"user\", r?.displayName);\n        navigate(\"/hompageen\");\n      } else if (\n        (r?.registered === true && r?.displayName === \"성재\") ||\n        (r?.registered === true && r?.displayName === \"엄마\") ||\n        (r?.registered === true && r?.displayName === \"은지\") ||\n        (r?.registered === true && r?.displayName === \"아빠\")\n      ) {\n        dispatch(usersActions.updateIdToken(r.idToken));\n        dispatch(usersActions.updateIsLoggedIn(true));\n        dispatch(usersActions.updateUser(r?.displayName));\n        localStorage.setItem(\"token\", r.idToken);\n        localStorage.setItem(\"isLoggedIn\", true);\n        localStorage.setItem(\"user\", r?.displayName);\n        navigate(\"/hompagekr\");\n      } else if (r?.registered === true) {\n        alert(\n          \"You are not authorized to use this service. \\n당신은 승인받지 않은 사용자입니다.\"\n        );\n      }\n    });\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Input the password to access the Message Log.\n      </Typography>\n      <Typography variant=\"h6\" color=\"white\">\n        로그에 접속 하려면 아이디와 패스워드를 입력해주세요.\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            color=\"primary\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            margin=\"dense\"\n            name=\"Email\"\n            label=\"Email\"\n            type=\"text\"\n            fullWidth\n            inputRef={idRef}\n          />\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            Submit\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport Loginform from \"../components/LogInForm/Loginform\";\n\nconst Login = () => {\n  return (\n    <>\n      <Loginform />\n    </>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport {\n  Drawer,\n  ListItem,\n  List,\n  ListItemIcon,\n  ListItemText,\n} from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst DrawerComponent = ({ openDrawer, setOpenDrawer }) => {\n  const reduxIsLoggedIn = useSelector((state) => state.isLoggedIn);\n  const reduxUser = useSelector((state) => state.user);\n  let navigate = useNavigate();\n  return (\n    <Drawer anchor=\"right\" open={openDrawer}>\n      {reduxIsLoggedIn ? (\n        <List>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                navigate(\"/hompageen\");\n              } else if (\n                reduxUser === \"성재\" ||\n                reduxUser === \"엄마\" ||\n                reduxUser === \"아빠\" ||\n                reduxUser === \"은지\"\n              ) {\n                navigate(\"/hompagekr\");\n              }\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>Home / 홈</ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/changepassword\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>Change Password / 비밀번호 바꾸기</ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                navigate(\"/msglogen\");\n              } else if (\n                reduxUser === \"성재\" ||\n                reduxUser === \"엄마\" ||\n                reduxUser === \"아빠\" ||\n                reduxUser === \"은지\"\n              ) {\n                navigate(\"/msglogkr\");\n              }\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>Message Log / 메세지 로그</ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/updateusername\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>Update Profile / 계정 정보 업데이트</ListItemText>\n            </ListItemIcon>\n          </ListItem>\n        </List>\n      ) : (\n        <List>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/signin\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>가입하기 / Register</ListItemText>\n            </ListItemIcon>\n          </ListItem>\n          <ListItem\n            divider\n            button\n            onClick={() => {\n              navigate(\"/login\");\n              setOpenDrawer(false);\n            }}\n          >\n            <ListItemIcon>\n              <ListItemText>로그인/ Log In</ListItemText>\n            </ListItemIcon>\n          </ListItem>\n        </List>\n      )}\n    </Drawer>\n  );\n};\n\nexport default DrawerComponent;\n","import { Toolbar, IconButton, Typography, useMediaQuery } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { Box } from \"@mui/system\";\nimport DrawerComponent from \"./DrawerComponent\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ListIcon from \"@mui/icons-material/List\";\nimport { useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Navbar = () => {\n  const [openDrawer, setOpenDrawer] = useState(true);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const reduxIsLoggedIn = useSelector((state) => state.isLoggedIn);\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n\n  return (\n    <>\n      <Box\n        elevation={10}\n        sx={{\n          backgroundColor:\n            \"linear-gradient(to left, #3399ff 27%, #9999ff 100%);\",\n        }}\n      >\n        <Toolbar>\n          <Box\n            sx={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              width: \"100%\",\n              alignItems: \"center\",\n              padding: \"10px 0px\",\n            }}\n            component=\"div\"\n          >\n            {/* link */}\n            {matches && (\n              <DrawerComponent\n                openDrawer={openDrawer}\n                setOpenDrawer={setOpenDrawer}\n              />\n            )}\n            {reduxIsLoggedIn && !matches ? (\n              <Box\n                sx={{\n                  display: \"flex\",\n                }}\n              >\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                      navigate(\"/hompageen\");\n                    } else if (\n                      reduxUser === \"성재\" ||\n                      reduxUser === \"엄마\" ||\n                      reduxUser === \"아빠\" ||\n                      reduxUser === \"은지\"\n                    ) {\n                      navigate(\"/hompagekr\");\n                    }\n                  }}\n                >\n                  Home / 홈\n                </Typography>\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    navigate(\"/changepassword\");\n                  }}\n                >\n                  Change Password / 비밀번호 바꾸기\n                </Typography>\n                <Typography\n                  sx={{\n                    marginRight: \"20px\",\n                    cursor: \"pointer\",\n                    color: \"white\",\n                  }}\n                  onClick={() => {\n                    if (reduxUser === \"Hans\" || reduxUser === \"Sarah\") {\n                      navigate(\"/msglogen\");\n                    } else if (\n                      reduxUser === \"성재\" ||\n                      reduxUser === \"엄마\" ||\n                      reduxUser === \"아빠\" ||\n                      reduxUser === \"은지\"\n                    ) {\n                      navigate(\"/msglogkr\");\n                    }\n                  }}\n                >\n                  Message Log / 메세지 로그\n                </Typography>\n              </Box>\n            ) : null}\n            {/* Button link */}\n            <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              {matches ? (\n                <IconButton onClick={() => setOpenDrawer(true)}>\n                  <ListIcon></ListIcon>\n                </IconButton>\n              ) : !reduxIsLoggedIn ? (\n                <>\n                  <button\n                    onClick={() => navigate(\"/login\")}\n                    style={{ marginRight: \"20px\" }}\n                  >\n                    LogIn / 로그인\n                  </button>\n                  <button onClick={() => navigate(\"/signin\")}>\n                    Register / 계정생성\n                  </button>\n                </>\n              ) : (\n                <button onClick={() => navigate(\"/updateusername\")}>\n                  Update Profile / 계정 정보 업데이트{\" \"}\n                </button>\n              )}\n            </Box>\n          </Box>\n        </Toolbar>\n      </Box>\n    </>\n  );\n};\n\nexport default Navbar;\n","import MainNavigation from \"./MainNavigation\";\nimport React from \"react\";\n\nconst Layout = (props) => {\n  return (\n    <>\n      <MainNavigation />\n      <main>{props.children}</main>\n    </>\n  );\n};\n\nexport default Layout;\n","import React, { useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./AddNote.css\";\n\nfunction AddNoteEn(props) {\n  const titleRef = useRef(\"\");\n  const textRef = useRef(\"\");\n  const now = new Date();\n\n  const reduxUserInfo = useSelector((state) => state.user);\n  function submitHandler(event) {\n    event.preventDefault();\n    const notes = {\n      title: titleRef.current.value,\n      text: textRef.current.value,\n      date: now.toLocaleString(),\n      logger: reduxUserInfo,\n    };\n\n    props.AddNote(notes);\n    titleRef.current.value = \"\";\n    textRef.current.value = \"\";\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">Title</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder=\"Log the title here..!\"\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">Text Log</label>\n        <textarea\n          rows=\"5\"\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder=\"Log the past event that you want to mention..\"\n        ></textarea>\n      </div>\n      <button>Submit</button>\n    </form>\n  );\n}\n\nexport default AddNoteEn;\n","import React from \"react\";\n\nimport \"./Note.css\";\n\nconst NoteEn = (props) => {\n  return (\n    <div>\n      <li className=\"note \">\n        <h3>{props.title}</h3>\n        <p>{props.text}</p>\n        <h6>{props.date}</h6>\n      </li>\n    </div>\n  );\n};\n\nexport default NoteEn;\n","import React from \"react\";\nimport Note from \"./NoteEn\";\nimport \"./NoteList.css\";\n\nconst NoteListEn = (props) => {\n  return (\n    <ul className=\"note-list\">\n      {props.note.map((note) => (\n        <Note\n          key={note.id}\n          title={note.title}\n          date={note.date}\n          text={note.text}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default NoteListEn;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  fetchNoteHandlerEn,\n  fetchNoteHandlerKr,\n  addNoteHandlerEn,\n  addNoteHandlerKr,\n} from \"../../Service/ApiService\";\nimport AddNoteEn from \"./AddNoteEn\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListEn from \"./NoteListEn\";\nconst MessageLogFormEn = () => {\n  const reduxUser = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const [note, setNote] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  let navigate = useNavigate();\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(null));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(null));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  const fetchNoteHandlerEn = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes = [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger} logged message at ${data[key].date}....`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerEn(note) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerEn();\n  }, [fetchNoteHandlerEn]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListEn note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>Welcome..! {reduxUser} </h3>\n        <button onClick={logoutHandler}> Logout</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>Log Format</h3>\n        <AddNoteEn AddNote={addNoteHandlerEn} logger={reduxUser}></AddNoteEn>\n      </section>\n      <section>\n        <button onClick={fetchNoteHandlerEn}>Update Notes</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>Log</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormEn;\n","import React from \"react\";\nimport MessageLogFormEn from \"../components/MessageLogForm/MessageLogFormEn\";\n\nconst MessageLogEn = () => {\n  return <MessageLogFormEn />;\n};\n\nexport default MessageLogEn;\n","import React, { useRef } from \"react\";\nimport \"./AddNote.css\";\nimport { useSelector } from \"react-redux\";\nfunction AddNoteKr(props) {\n  const titleRef = useRef(\"\");\n  const textRef = useRef(\"\");\n  const now = new Date();\n  const reduxUserInfo = useSelector((state) => state.user);\n  function submitHandler(event) {\n    event.preventDefault();\n    const notes = {\n      title: titleRef.current.value,\n      text: textRef.current.value,\n      date: now.toLocaleString(),\n      logger: reduxUserInfo,\n    };\n\n    console.log(notes);\n    props.AddNote(notes);\n    titleRef.current.value = \"\";\n    textRef.current.value = \"\";\n  }\n\n  console.log(reduxUserInfo);\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control\">\n        <label htmlFor=\"title\">제목</label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          ref={titleRef}\n          style={{ color: \"white\" }}\n          placeholder=\"제목을 입력하시오.\"\n        />\n      </div>\n      <div className=\"control\">\n        <label htmlFor=\"text-log\">내용</label>\n        <textarea\n          rows=\"5\"\n          id=\"text-log\"\n          ref={textRef}\n          style={{ color: \"white\" }}\n          placeholder=\"남기고 싶은 말을 적으시오..\"\n        ></textarea>\n      </div>\n      <button>제출</button>\n    </form>\n  );\n}\n\nexport default AddNoteKr;\n","import React from \"react\";\n\nimport \"./Note.css\";\n\nconst NoteKr = (props) => {\n  return (\n    <div>\n      <li className=\"note \">\n        <h3>{props.title}</h3>\n        <p>{props.text}</p>\n        <h6>{props.date}</h6>\n      </li>\n    </div>\n  );\n};\n\nexport default NoteKr;\n","import React from \"react\";\nimport Note from \"./NoteKr\";\nimport \"./NoteList.css\";\n\nconst NoteListKr = (props) => {\n  return (\n    <ul className=\"note-list\">\n      {props.note.map((note) => (\n        <Note\n          key={note.id}\n          title={note.title}\n          date={note.date}\n          text={note.text}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default NoteListKr;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport AddNoteKr from \"./AddNoteKr\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport NoteListKr from \"./NoteListKr\";\nconst MessageLogFormKr = () => {\n  const reduxUser = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const [note, setNote] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  let navigate = useNavigate();\n\n  const logoutHandler = () => {\n    dispatch(usersActions.updateIdToken(null));\n    dispatch(usersActions.updateIsLoggedIn(false));\n    dispatch(usersActions.updateUser(null));\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"isLoggedIn\");\n    localStorage.removeItem(\"user\");\n    navigate(\"/login\");\n  };\n\n  const fetchNoteHandlerKr = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes = [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      setNote(loadedNotes);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  async function addNoteHandlerKr(note) {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  }\n\n  useEffect(() => {\n    fetchNoteHandlerKr();\n  }, [fetchNoteHandlerKr]);\n\n  let content = <p style={{ color: \"white\" }}>Found no Notes.</p>;\n\n  if (note.length > 0) {\n    content = <NoteListKr note={note} />;\n  }\n\n  if (error) {\n    content = <p style={{ color: \"white\" }}>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p style={{ color: \"white\" }}>Loading...</p>;\n  }\n\n  return (\n    <div>\n      <section>\n        <h3 style={{ color: \"white\" }}>반갑습니다.. {reduxUser}님.... </h3>\n        <button onClick={logoutHandler}> Logout</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>메세지 양식</h3>\n        <AddNoteKr AddNote={addNoteHandlerKr} logger={reduxUser}></AddNoteKr>\n      </section>\n      <section>\n        <button onClick={fetchNoteHandlerKr}>메세지 업데이트</button>\n      </section>\n      <section>\n        <h3 style={{ color: \"white\" }}>메세지 로그</h3>\n        {content}\n      </section>\n    </div>\n  );\n};\n\nexport default MessageLogFormKr;\n","import React from \"react\";\nimport MessageLogFormEn from \"../components/MessageLogForm/MessageLogFormKr\";\n\nconst MessageLogKr = () => {\n  return <MessageLogFormEn />;\n};\n\nexport default MessageLogKr;\n","import { Grid } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Divider } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { signIn } from \"../../Service/ApiService\";\nconst SignInForm = () => {\n  const idRef = useRef(\"\");\n  const pwRef = useRef(\"\");\n  let navigate = useNavigate();\n\n  const formHandler = () => {\n    const a = signIn(idRef.current.value, pwRef.current.value);\n    a.then((r) => {\n      if (r?.idToken) {\n        alert(\"Successfully Sign In. \\n 가입이 완료 되었습니다.\");\n        navigate(\"/login\");\n      }\n    });\n  };\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Input Email and Password to sign in. Password should be more than 7\n        digits.\n      </Typography>\n      <Typography variant=\"h6\" color=\"white\">\n        이메일 과 패스워드를 입력해서 가입해 보세요. 비밀번호는 7자리 이상이여야\n        됩니다.\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            color=\"primary\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            margin=\"dense\"\n            name=\"Email\"\n            label=\"Email\"\n            type=\"text\"\n            fullWidth\n            inputRef={idRef}\n          />\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            Submit\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default SignInForm;\n","import React from \"react\";\nimport SignInform from \"../components/SingInForm/SignInForm\";\nfunction SignIn() {\n  return <SignInform />;\n}\n\nexport default SignIn;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst ChangePasswordForm = (props) => {\n  const pwRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxidToken = useSelector((state) => state.idToken);\n\n  const formHandler = async () => {\n    console.log(pwRef.current.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            password: pwRef.current.value,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage =\n          \"Failed to change password. Password Should be more than 7 digits. \\n 비밀번호 변경에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다.\";\n        if (data?.error?.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n        throw new Error(errorMessage);\n      }\n      const json = await data.json();\n      console.log(json);\n      alert(\"성공하였습니다.\");\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Input the password that you want to change.\n      </Typography>\n      <Typography variant=\"h6\" color=\"white\">\n        변경할 패스워드를 입력해 주세요.\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"pw\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={pwRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            Submit\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default ChangePasswordForm;\n","import React from \"react\";\nimport ChangePasswordForm from \"../components/ChangePasswordForm/ChangePasswordForm\";\nconst ChangePassword = () => {\n  return <ChangePasswordForm />;\n};\n\nexport default ChangePassword;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography, useMediaQuery } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nconst HomeFormEn = (props) => {\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Welcome Back.. {reduxUser}..\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={12}>\n          {!matches ? (\n            <Box\n              sx={{ width: \"400px\", height: \"600px\" }}\n              component=\"img\"\n              src=\"image/sarah.jpeg\"\n            ></Box>\n          ) : (\n            <Box\n              sx={{ width: \"300px\", height: \"400px\" }}\n              component=\"img\"\n              src=\"image/sarah.jpeg\"\n            ></Box>\n          )}\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogen\");\n            }}\n          >\n            Log Message\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default HomeFormEn;\n","import React from \"react\";\nimport HomeFormEnForm from \"../components/Home/HomeFormEn\";\nconst HomePageEn = () => {\n  return <HomeFormEnForm />;\n};\n\nexport default HomePageEn;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography, useMediaQuery } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Box } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nconst HomeFormKr = (props) => {\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        환영합니다.. {reduxUser} 님..\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container style={{ marginTop: \"10px\" }}></Grid>\n      {!matches ? (\n        <Grid item xs={12} sm={12}>\n          <Box\n            sx={{ width: \"600px\", height: \"400px\", marginLeft: \"-10px\" }}\n            component=\"img\"\n            src=\"image/family.jpeg\"\n          ></Box>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogkr\");\n            }}\n          >\n            메세지 남기러 가기\n          </button>\n        </Grid>\n      ) : (\n        <Grid item xs={12} sm={12}>\n          <Box\n            sx={{ width: \"300px\", height: \"300px\", marginLeft: \"-10px\" }}\n            component=\"img\"\n            src=\"image/family.jpeg\"\n          ></Box>\n          <button\n            style={{ marginTop: \"30px\" }}\n            onClick={() => {\n              navigate(\"/msglogkr\");\n            }}\n          >\n            메세지 남기러 가기\n          </button>\n        </Grid>\n      )}\n    </section>\n  );\n};\n\nexport default HomeFormKr;\n","import React from \"react\";\nimport HomeFormKrForm from \"../components/Home/HomeFormKr\";\nconst HomePageKr = () => {\n  return <HomeFormKrForm />;\n};\n\nexport default HomePageKr;\n","import { Divider } from \"@mui/material\";\nimport { TextField } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React, { useRef } from \"react\";\nimport { logIn } from \"../../Service/ApiService\";\nimport { useNavigate } from \"react-router-dom\";\nimport { usersActions } from \"../../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst UpdateProfileForm = (props) => {\n  const userRef = useRef(\"\");\n  let navigate = useNavigate();\n  const reduxidToken = useSelector((state) => state.idToken);\n\n  const formHandler = async () => {\n    console.log(userRef.current.value);\n    try {\n      const data = await fetch(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({\n            idToken: reduxidToken,\n            displayName: userRef.current.value,\n            photoUrl: null,\n            returnSecureToken: false,\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      if (!data.ok) {\n        console.log(data);\n        let errorMessage =\n          \"Failed to change user name. \\n 사용자 이름 변경에 실패하였습니다.\";\n        if (data?.error?.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n        throw new Error(errorMessage);\n      }\n      const json = await data.json();\n      console.log(json);\n      alert(\"성공하였습니다.\");\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  console.log(reduxidToken);\n  return (\n    <section>\n      <Typography variant=\"h6\" color=\"white\">\n        Input the username that you want to change.\n      </Typography>\n      <Typography variant=\"h6\" color=\"white\">\n        변경할 사용자 이름을 입력해 주세요.\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container spacing={4} style={{ marginTop: \"10px\" }}>\n        <Grid item xs={12} sm={3}>\n          {}\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            margin=\"dense\"\n            required\n            name=\"Username\"\n            sx={{\n              input: {\n                borderRadius: \"5px\",\n                border: \"1px solid white\",\n                color: \"white\",\n              },\n            }}\n            label=\"Username\"\n            type=\"Username\"\n            fullWidth\n            inputRef={userRef}\n          />\n          <button style={{ marginTop: \"30px\" }} onClick={formHandler}>\n            Submit\n          </button>\n        </Grid>\n      </Grid>\n    </section>\n  );\n};\n\nexport default UpdateProfileForm;\n","import React from \"react\";\nimport ChangeUserNameForm from \"../components/UpdateProfileForm/UpdateProfileForm\";\nconst ChangeUserName = () => {\n  return <ChangeUserNameForm />;\n};\n\nexport default ChangeUserName;\n","import { Divider } from \"@mui/material\";\n\nimport { Grid } from \"@mui/material\";\nimport { Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { Box } from \"@mui/material\";\n\nconst InitialPage = (props) => {\n  let navigate = useNavigate();\n  const reduxUser = useSelector((state) => state.user);\n\n  return (\n    <section>\n      <Typography variant=\"p\" color=\"white\">\n        Internet Logger v2\n      </Typography>\n      <Divider sx={{ backgroundColor: \"white\", marginTop: \"10px\" }} />\n      <Grid container style={{ marginTop: \"10px\" }}></Grid>\n      <Grid item xs={12} sm={12}>\n        <Typography variant=\"h6\" color=\"white\">\n          Select Menu to Start.\n        </Typography>\n        <Typography variant=\"h6\" color=\"white\">\n          원하는 기능을 선택하여 시작해보세요.\n        </Typography>\n      </Grid>\n    </section>\n  );\n};\n\nexport default InitialPage;\n","import React from \"react\";\nimport InitialPageForm from \"../components/InitialPage/InitialPage\";\nconst InitialPage = () => {\n  return <InitialPageForm />;\n};\n\nexport default InitialPage;\n","import React, { useEffect } from \"react\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./pages/Login\";\nimport Layout from \"./components/Layout/Layout\";\nimport MessageLogEn from \"./pages/MessageLogEn\";\nimport MessageLogKr from \"./pages/MessageLogKr\";\nimport SignIn from \"./pages/SignIn\";\nimport ChangePassword from \"./pages/ChangePassword\";\nimport HomePageEn from \"./pages/HomePageEn\";\nimport HomePageKr from \"./pages/HomePageKr\";\nimport ChangeUserName from \"./pages/ChangeUserName\";\nimport InitialPage from \"./pages/InitialPage\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { usersActions } from \"./store/userSlice\";\n\nfunction App() {\n  const reduxIsLoggedIn = useSelector((state) => state.isLoggedIn);\n  const dispatch = useDispatch();\n  const storedToken = localStorage.getItem(\"token\");\n  const storedIsLoggedIn = localStorage.getItem(\"isLoggedIn\");\n  const storedUser = localStorage.getItem(\"user\");\n\n  useEffect(() => {\n    if (storedIsLoggedIn) {\n      dispatch(usersActions.updateIdToken(storedToken));\n      dispatch(usersActions.updateUser(storedUser));\n      dispatch(usersActions.updateIsLoggedIn(storedIsLoggedIn));\n    }\n  }, [storedToken, storedIsLoggedIn, storedUser]);\n\n  return (\n    <Layout>\n      <Routes>\n        {storedIsLoggedIn ? (\n          <Route path=\"*\" element={<Navigate to=\"/initialpage\" />} />\n        ) : (\n          <Route path=\"*\" element={<Navigate to=\"/login\" />} />\n        )}\n        {!storedIsLoggedIn && <Route path=\"/login\" element={<Login></Login>} />}\n        {storedIsLoggedIn && (\n          <Route path=\"/initialpage\" element={<InitialPage></InitialPage>} />\n        )}\n        {!storedIsLoggedIn && (\n          <Route path=\"/signin\" element={<SignIn></SignIn>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route path=\"/msglogen\" element={<MessageLogEn></MessageLogEn>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route path=\"/msglogkr\" element={<MessageLogKr></MessageLogKr>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route path=\"/hompageen\" element={<HomePageEn></HomePageEn>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route path=\"/hompagekr\" element={<HomePageKr></HomePageKr>} />\n        )}\n        {reduxIsLoggedIn && (\n          <Route\n            path=\"/updateusername\"\n            element={<ChangeUserName></ChangeUserName>}\n          />\n        )}\n        {reduxIsLoggedIn && (\n          <Route\n            path=\"/changepassword\"\n            element={<ChangePassword></ChangePassword>}\n          />\n        )}\n      </Routes>\n    </Layout>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store/userSlice\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}