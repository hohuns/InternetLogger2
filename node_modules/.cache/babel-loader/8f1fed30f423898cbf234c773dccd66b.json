{"ast":null,"code":"import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: \"\",\n  idToken: \"\",\n  isLoggedIn: \"\"\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    updateUser(state, action) {\n      state.user = action.payload;\n    },\n\n    updateIdToken(state, action) {\n      state.idToken = action.payload;\n    },\n\n    updateIsLoggedIn(state, action) {\n      state.isLoggedIn = action.payload;\n    }\n\n  }\n}); //Create the store\n\nconst store = configureStore({\n  reducer: userSlice.reducer\n});\nexport const usersActions = userSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/InterLogger Version2/src/store/userSlice.js"],"names":["createSlice","configureStore","initialState","user","idToken","isLoggedIn","userSlice","name","reducers","updateUser","state","action","payload","updateIdToken","updateIsLoggedIn","store","reducer","usersActions","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,UAAU,EAAE;AAHO,CAArB;AAMA,MAAMC,SAAS,GAAGN,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,YAAY,EAAEA,YAFc;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACP,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD,KAHO;;AAIRC,IAAAA,aAAa,CAACH,KAAD,EAAQC,MAAR,EAAgB;AAC3BD,MAAAA,KAAK,CAACN,OAAN,GAAgBO,MAAM,CAACC,OAAvB;AACD,KANO;;AAORE,IAAAA,gBAAgB,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AAC9BD,MAAAA,KAAK,CAACL,UAAN,GAAmBM,MAAM,CAACC,OAA1B;AACD;;AATO;AAHkB,CAAD,CAA7B,C,CAgBA;;AACA,MAAMG,KAAK,GAAGd,cAAc,CAAC;AAC3Be,EAAAA,OAAO,EAAEV,SAAS,CAACU;AADQ,CAAD,CAA5B;AAIA,OAAO,MAAMC,YAAY,GAAGX,SAAS,CAACY,OAA/B;AACP,eAAeH,KAAf","sourcesContent":["import { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  user: \"\",\n  idToken: \"\",\n  isLoggedIn: \"\",\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    updateUser(state, action) {\n      state.user = action.payload;\n    },\n    updateIdToken(state, action) {\n      state.idToken = action.payload;\n    },\n    updateIsLoggedIn(state, action) {\n      state.isLoggedIn = action.payload;\n    },\n  },\n});\n\n//Create the store\nconst store = configureStore({\n  reducer: userSlice.reducer,\n});\n\nexport const usersActions = userSlice.actions;\nexport default store;\n"]},"metadata":{},"sourceType":"module"}