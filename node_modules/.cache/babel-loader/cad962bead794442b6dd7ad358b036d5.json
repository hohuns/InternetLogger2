{"ast":null,"code":"const logIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (!data.ok) {\n      var _data$error;\n\n      console.log(data);\n      let errorMessage = \"Authentication failed! \\n 로그인에 실패하였습니다.\";\n\n      if (data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst signIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (!data.ok) {\n      var _data$error2;\n\n      console.log(data);\n      let errorMessage = \"Sign In failed! Password Should be more than 7 digits. \\n 회원가입에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다.\";\n\n      if (data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst fetchNoteHandlerEn = async () => {\n  try {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\");\n\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const data = await response.json();\n    console.log(data);\n    const loadedNotes = [];\n\n    for (const key in data) {\n      loadedNotes.push({\n        id: key,\n        title: data[key].title,\n        text: data[key].text,\n        date: `${data[key].logger} logged message at ${data[key].date}....`\n      });\n    }\n\n    loadedNotes.reverse();\n    console.log(loadedNotes); // setNoteS(loadedNotes);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nconst addNoteHandlerEn = async note => {\n  const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\", {\n    method: \"POST\",\n    body: JSON.stringify(note),\n    headers: {\n      \"Content-Type\": \"appication/json\"\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n  alert(`Message is successfully added..!`);\n  fetchNoteHandlerEn();\n};\n\nconst addNoteHandlerKr = async note => {\n  const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\", {\n    method: \"POST\",\n    body: JSON.stringify(note),\n    headers: {\n      \"Content-Type\": \"appication/json\"\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n  alert(`메세지가 성공적으로 추가되었습니다.`);\n  fetchNoteHandlerKr();\n};\n\nexport { logIn, signIn, fetchNoteHandlerEn, addNoteHandlerEn, addNoteHandlerKr };","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/InterLogger Version2/src/Service/ApiService.js"],"names":["logIn","enteredEmail","enteredPassword","data","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","ok","console","log","errorMessage","error","message","Error","json","err","alert","signIn","fetchNoteHandlerEn","response","loadedNotes","key","push","id","title","text","date","logger","reverse","addNoteHandlerEn","note","addNoteHandlerKr","fetchNoteHandlerKr"],"mappings":"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","sourcesContent":["const logIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage = \"Authentication failed! \\n 로그인에 실패하였습니다.\";\n      if (data?.error?.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst signIn = async (enteredEmail, enteredPassword) => {\n  try {\n    const data = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if (!data.ok) {\n      console.log(data);\n      let errorMessage =\n        \"Sign In failed! Password Should be more than 7 digits. \\n 회원가입에 실패하였습니다. 비밀번호는 7자 이상이여야 합니다.\";\n      if (data?.error?.message) {\n        //equal with if(data && data.error && data.error.message)\n        errorMessage = data.error.message;\n      }\n      throw new Error(errorMessage);\n    }\n    const json = await data.json();\n    console.log(json);\n    return json;\n  } catch (err) {\n    alert(err);\n  }\n};\n\nconst fetchNoteHandlerEn = async () => {\n  try {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n    );\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const data = await response.json();\n    console.log(data);\n    const loadedNotes = [];\n    for (const key in data) {\n      loadedNotes.push({\n        id: key,\n        title: data[key].title,\n        text: data[key].text,\n        date: `${data[key].logger} logged message at ${data[key].date}....`,\n      });\n    }\n    loadedNotes.reverse();\n    console.log(loadedNotes);\n    // setNoteS(loadedNotes);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nconst addNoteHandlerEn = async (note) => {\n  const response = await fetch(\n    \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n    {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\",\n      },\n    }\n  );\n  const data = await response.json();\n  console.log(data);\n  alert(`Message is successfully added..!`);\n  fetchNoteHandlerEn();\n};\n\nconst addNoteHandlerKr = async (note) => {\n  const response = await fetch(\n    \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n    {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\",\n      },\n    }\n  );\n  const data = await response.json();\n  console.log(data);\n  alert(`메세지가 성공적으로 추가되었습니다.`);\n  fetchNoteHandlerKr();\n};\n\nexport {\n  logIn,\n  signIn,\n  fetchNoteHandlerEn,\n  addNoteHandlerEn,\n  addNoteHandlerKr,\n};\n"]},"metadata":{},"sourceType":"module"}