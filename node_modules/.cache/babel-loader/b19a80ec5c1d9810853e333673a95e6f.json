{"ast":null,"code":"import { usersActions } from \"../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nexport default function ApiService() {\n  const dispatch = useDispatch();\n\n  const logIn = (enteredEmail, enteredPassword) => {\n    fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          var _data$error;\n\n          console.log(data);\n          let errorMessage = \"Authentication failed!\";\n\n          if (data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) {\n            //equal with if(data && data.error && data.error.message)\n            errorMessage = data.error.message;\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      console.log(data);\n      dispatch(usersActions.updateIdToken(data.idToken));\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  const signIn = (enteredEmail, enteredPassword) => {\n    fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          var _data$error2;\n\n          console.log(data);\n          let errorMessage = \"Authentication failed!\";\n\n          if (data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.message) {\n            //equal with if(data && data.error && data.error.message)\n            errorMessage = data.error.message;\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      console.log(data);\n    }).catch(err => {\n      alert(err.message);\n    });\n  };\n\n  const changePassword = enteredNewPassword => {\n    fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        // idToken: authCtx.token,\n        password: enteredNewPassword,\n        returnSecureToken: false\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then(data => {\n          var _data$error3;\n\n          console.log(data);\n          let errorMessage = \"Failed to change password\";\n\n          if (data === null || data === void 0 ? void 0 : (_data$error3 = data.error) === null || _data$error3 === void 0 ? void 0 : _data$error3.message) {\n            //equal with if(data && data.error && data.error.message)\n            errorMessage = data.error.message;\n          }\n\n          throw new Error(errorMessage);\n        });\n      }\n    }).then(data => {\n      console.log(data);\n      alert(\"Success password..!\");\n    }).catch(err => {\n      alert(err.errorMessage);\n    });\n  };\n\n  const fetchNoteHandlerEn = async () => {\n    try {\n      const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes = [];\n\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger} logged message at ${data[key].date}....`\n        });\n      }\n\n      loadedNotes.reverse();\n      console.log(loadedNotes); // setNoteS(loadedNotes);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const fetchNoteHandlerKr = async () => {\n    try {\n      const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\");\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes = [];\n\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`\n        });\n      }\n\n      loadedNotes.reverse();\n      console.log(loadedNotes); // setNoteF(loadedNotes);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const addNoteHandlerEn = async note => {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\", {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  };\n\n  const addNoteHandlerKr = async note => {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\", {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\"\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  };\n} // export {\n//   logIn,\n//   signIn,\n//   changePassword,\n//   fetchNoteHandlerEn,\n//   fetchNoteHandlerKr,\n//   addNoteHandlerEn,\n//   addNoteHandlerKr,\n// };","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/InterLogger Version2/src/Service/ApiService.js"],"names":["usersActions","useSelector","useDispatch","ApiService","dispatch","logIn","enteredEmail","enteredPassword","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","console","log","errorMessage","error","message","Error","updateIdToken","idToken","catch","err","alert","signIn","changePassword","enteredNewPassword","fetchNoteHandlerEn","response","loadedNotes","key","push","id","title","text","date","logger","reverse","fetchNoteHandlerKr","addNoteHandlerEn","note","addNoteHandlerKr"],"mappings":"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","sourcesContent":["import { usersActions } from \"../store/userSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function ApiService() {\n  const dispatch = useDispatch();\n  const logIn = (enteredEmail, enteredPassword) => {\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            console.log(data);\n            let errorMessage = \"Authentication failed!\";\n            if (data?.error?.message) {\n              //equal with if(data && data.error && data.error.message)\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        console.log(data);\n        dispatch(usersActions.updateIdToken(data.idToken));\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  const signIn = (enteredEmail, enteredPassword) => {\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: enteredEmail,\n          password: enteredPassword,\n          returnSecureToken: true,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            console.log(data);\n            let errorMessage = \"Authentication failed!\";\n            if (data?.error?.message) {\n              //equal with if(data && data.error && data.error.message)\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        console.log(data);\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  };\n\n  const changePassword = (enteredNewPassword) => {\n    fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n      {\n        method: \"POST\",\n        body: JSON.stringify({\n          // idToken: authCtx.token,\n          password: enteredNewPassword,\n          returnSecureToken: false,\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            console.log(data);\n            let errorMessage = \"Failed to change password\";\n            if (data?.error?.message) {\n              //equal with if(data && data.error && data.error.message)\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        console.log(data);\n        alert(\"Success password..!\");\n      })\n      .catch((err) => {\n        alert(err.errorMessage);\n      });\n  };\n\n  const fetchNoteHandlerEn = async () => {\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      console.log(data);\n      const loadedNotes = [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger} logged message at ${data[key].date}....`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      // setNoteS(loadedNotes);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const fetchNoteHandlerKr = async () => {\n    try {\n      const response = await fetch(\n        \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedNotes = [];\n      for (const key in data) {\n        loadedNotes.push({\n          id: key,\n          title: data[key].title,\n          text: data[key].text,\n          date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`,\n        });\n      }\n      loadedNotes.reverse();\n      console.log(loadedNotes);\n      // setNoteF(loadedNotes);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  const addNoteHandlerEn = async (note) => {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`Message is successfully added..!`);\n    fetchNoteHandlerEn();\n  };\n\n  const addNoteHandlerKr = async (note) => {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(note),\n        headers: {\n          \"Content-Type\": \"appication/json\",\n        },\n      }\n    );\n    const data = await response.json();\n    console.log(data);\n    alert(`메세지가 성공적으로 추가되었습니다.`);\n    fetchNoteHandlerKr();\n  };\n}\n\n// export {\n//   logIn,\n//   signIn,\n//   changePassword,\n//   fetchNoteHandlerEn,\n//   fetchNoteHandlerKr,\n//   addNoteHandlerEn,\n//   addNoteHandlerKr,\n// };\n"]},"metadata":{},"sourceType":"module"}