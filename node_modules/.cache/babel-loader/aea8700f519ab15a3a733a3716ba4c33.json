{"ast":null,"code":"const logIn = (enteredEmail, enteredPassword) => {\n  fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email: enteredEmail,\n      password: enteredPassword,\n      returnSecureToken: true\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return res.json().then(data => {\n        var _data$error;\n\n        console.log(data);\n        let errorMessage = \"Authentication failed!\";\n\n        if (data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n\n        throw new Error(errorMessage);\n      });\n    }\n  }).then(data => {\n    console.log(data);\n  }).catch(err => {\n    alert(err.message);\n  });\n};\n\nconst signIn = (enteredEmail, enteredPassword) => {\n  fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      email: enteredEmail,\n      password: enteredPassword,\n      returnSecureToken: true\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return res.json().then(data => {\n        var _data$error2;\n\n        console.log(data);\n        let errorMessage = \"Authentication failed!\";\n\n        if (data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n\n        throw new Error(errorMessage);\n      });\n    }\n  }).then(data => {\n    console.log(data);\n  }).catch(err => {\n    alert(err.message);\n  });\n};\n\nconst changePassword = enteredNewPassword => {\n  fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      // idToken: authCtx.token,\n      password: enteredNewPassword,\n      returnSecureToken: false\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return res.json().then(data => {\n        var _data$error3;\n\n        console.log(data);\n        let errorMessage = \"Failed to change password\";\n\n        if (data === null || data === void 0 ? void 0 : (_data$error3 = data.error) === null || _data$error3 === void 0 ? void 0 : _data$error3.message) {\n          //equal with if(data && data.error && data.error.message)\n          errorMessage = data.error.message;\n        }\n\n        throw new Error(errorMessage);\n      });\n    }\n  }).then(data => {\n    console.log(data);\n    alert(\"Success password..!\");\n  }).catch(err => {\n    alert(err.errorMessage);\n  });\n};\n\nconst fetchNoteHandlerEn = async () => {\n  try {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\");\n\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const data = await response.json();\n    console.log(data);\n    const loadedNotes = [];\n\n    for (const key in data) {\n      loadedNotes.push({\n        id: key,\n        title: data[key].title,\n        text: data[key].text,\n        date: `${data[key].logger} logged message at ${data[key].date}....`\n      });\n    }\n\n    loadedNotes.reverse();\n    console.log(loadedNotes); // setNoteS(loadedNotes);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nconst fetchNoteHandlerKr = async () => {\n  try {\n    const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\");\n\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const data = await response.json();\n    const loadedNotes = [];\n\n    for (const key in data) {\n      loadedNotes.push({\n        id: key,\n        title: data[key].title,\n        text: data[key].text,\n        date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`\n      });\n    }\n\n    loadedNotes.reverse();\n    console.log(loadedNotes); // setNoteF(loadedNotes);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nasync function addNoteHandlerEn(note) {\n  const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\", {\n    method: \"POST\",\n    body: JSON.stringify(note),\n    headers: {\n      \"Content-Type\": \"appication/json\"\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n  alert(`Message is successfully added..!`);\n  fetchNoteHandlerEn();\n}\n\nasync function addNoteHandlerKr(note) {\n  const response = await fetch(\"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\", {\n    method: \"POST\",\n    body: JSON.stringify(note),\n    headers: {\n      \"Content-Type\": \"appication/json\"\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n  alert(`메세지가 성공적으로 추가되었습니다.`);\n  fetchNoteHandlerKr();\n}\n\nexport { logIn, signIn, changePassword, fetchNoteHandlerEn, fetchNoteHandlerKr, addNoteHandlerEn, addNoteHandlerKr };","map":{"version":3,"sources":["/Users/sungjaejoo/Desktop/InterLogger Version2/src/Service/ApiService.js"],"names":["logIn","enteredEmail","enteredPassword","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","then","res","ok","json","data","console","log","errorMessage","error","message","Error","catch","err","alert","signIn","changePassword","enteredNewPassword","fetchNoteHandlerEn","response","loadedNotes","key","push","id","title","text","date","logger","reverse","fetchNoteHandlerKr","addNoteHandlerEn","note","addNoteHandlerKr"],"mappings":"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","sourcesContent":["const logIn = (enteredEmail, enteredPassword) => {\n  fetch(\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then((data) => {\n          console.log(data);\n          let errorMessage = \"Authentication failed!\";\n          if (data?.error?.message) {\n            //equal with if(data && data.error && data.error.message)\n            errorMessage = data.error.message;\n          }\n          throw new Error(errorMessage);\n        });\n      }\n    })\n    .then((data) => {\n      console.log(data);\n    })\n    .catch((err) => {\n      alert(err.message);\n    });\n};\n\nconst signIn = (enteredEmail, enteredPassword) => {\n  fetch(\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then((data) => {\n          console.log(data);\n          let errorMessage = \"Authentication failed!\";\n          if (data?.error?.message) {\n            //equal with if(data && data.error && data.error.message)\n            errorMessage = data.error.message;\n          }\n          throw new Error(errorMessage);\n        });\n      }\n    })\n    .then((data) => {\n      console.log(data);\n    })\n    .catch((err) => {\n      alert(err.message);\n    });\n};\n\nconst changePassword = (enteredNewPassword) => {\n  fetch(\n    \"https://identitytoolkit.googleapis.com/v1/accounts:update?key=AIzaSyCkLePHqkPxNxPalsSLE_C4CbAaOiaGwNw\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        // idToken: authCtx.token,\n        password: enteredNewPassword,\n        returnSecureToken: false,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((res) => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return res.json().then((data) => {\n          console.log(data);\n          let errorMessage = \"Failed to change password\";\n          if (data?.error?.message) {\n            //equal with if(data && data.error && data.error.message)\n            errorMessage = data.error.message;\n          }\n          throw new Error(errorMessage);\n        });\n      }\n    })\n    .then((data) => {\n      console.log(data);\n      alert(\"Success password..!\");\n    })\n    .catch((err) => {\n      alert(err.errorMessage);\n    });\n};\n\nconst fetchNoteHandlerEn = async () => {\n  try {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\"\n    );\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const data = await response.json();\n    console.log(data);\n    const loadedNotes = [];\n    for (const key in data) {\n      loadedNotes.push({\n        id: key,\n        title: data[key].title,\n        text: data[key].text,\n        date: `${data[key].logger} logged message at ${data[key].date}....`,\n      });\n    }\n    loadedNotes.reverse();\n    console.log(loadedNotes);\n    // setNoteS(loadedNotes);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nconst fetchNoteHandlerKr = async () => {\n  try {\n    const response = await fetch(\n      \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\"\n    );\n    if (!response.ok) {\n      throw new Error(\"Something went wrong!\");\n    }\n\n    const data = await response.json();\n    const loadedNotes = [];\n    for (const key in data) {\n      loadedNotes.push({\n        id: key,\n        title: data[key].title,\n        text: data[key].text,\n        date: `${data[key].logger}님이 ${data[key].date}에 남기셨습니다..`,\n      });\n    }\n    loadedNotes.reverse();\n    console.log(loadedNotes);\n    // setNoteF(loadedNotes);\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nasync function addNoteHandlerEn(note) {\n  const response = await fetch(\n    \"https://react-http-2887f-default-rtdb.firebaseio.com/notes.json\",\n    {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\",\n      },\n    }\n  );\n  const data = await response.json();\n  console.log(data);\n  alert(`Message is successfully added..!`);\n  fetchNoteHandlerEn();\n}\n\nasync function addNoteHandlerKr(note) {\n  const response = await fetch(\n    \"https://react-http-2887f-default-rtdb.firebaseio.com/notes2.json\",\n    {\n      method: \"POST\",\n      body: JSON.stringify(note),\n      headers: {\n        \"Content-Type\": \"appication/json\",\n      },\n    }\n  );\n  const data = await response.json();\n  console.log(data);\n  alert(`메세지가 성공적으로 추가되었습니다.`);\n  fetchNoteHandlerKr();\n}\n\nexport {\n  logIn,\n  signIn,\n  changePassword,\n  fetchNoteHandlerEn,\n  fetchNoteHandlerKr,\n  addNoteHandlerEn,\n  addNoteHandlerKr,\n};\n"]},"metadata":{},"sourceType":"module"}